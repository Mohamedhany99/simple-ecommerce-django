openapi: 3.0.3
info:
  title: E-commerce Backend API
  version: 0.1.0
  description: API Schema for E-commerce Backend
paths:
  /add-cart/:
    post:
      operationId: add_cart_create
      tags:
      - add-cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToCartRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddToCartRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddToCartRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddToCart'
          description: ''
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /login/:
    post:
      operationId: login_create
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /make-order/:
    post:
      operationId: make_order_create
      tags:
      - make-order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /products/:
    get:
      operationId: products_list
      parameters:
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListProduct'
          description: ''
  /register/:
    post:
      operationId: register_create
      tags:
      - register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegisterationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegisterationRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegisteration'
          description: ''
  /user-cart/:
    get:
      operationId: user_cart_retrieve
      tags:
      - user-cart
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddToCart'
          description: ''
  /view-order/:
    get:
      operationId: view_order_list
      tags:
      - view-order
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: ''
components:
  schemas:
    AddToCart:
      type: object
      properties:
        user:
          type: integer
          nullable: true
        products:
          type: array
          items:
            type: integer
      required:
      - products
    AddToCartRequest:
      type: object
      properties:
        user:
          type: integer
          nullable: true
        products:
          type: array
          items:
            type: integer
      required:
      - products
    ListProduct:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
      required:
      - name
      - price
    Login:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          maxLength: 128
      required:
      - password
      - username
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          minLength: 1
          maxLength: 128
      required:
      - password
      - username
    Order:
      type: object
      properties:
        user:
          type: integer
          nullable: true
        cart:
          type: integer
          nullable: true
        total:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
      required:
      - total
    OrderRequest:
      type: object
      properties:
        user:
          type: integer
          nullable: true
        cart:
          type: integer
          nullable: true
        total:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
      required:
      - total
    TokenObtainPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    UserRegisteration:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - username
    UserRegisterationRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 128
        confirm_password:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 150
      required:
      - confirm_password
      - password
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
